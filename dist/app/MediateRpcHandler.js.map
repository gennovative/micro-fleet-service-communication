{"version":3,"sources":["app/MediateRpcHandler.ts"],"names":[],"mappings":"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","file":"MediateRpcHandler.js","sourcesContent":["import { injectable, inject, IDependencyContainer, Guard, Exception, Types as CmT } from 'back-lib-common-util';\r\n\r\nimport { Types as T } from './Types';\r\nimport { IMessageBrokerConnector, IMessage, MessageHandleFunction } from './MessageBrokerConnector';\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface IMediateRpcHandler extends rpc.IRpcHandler {\r\n}\r\n\r\n@injectable()\r\nexport class MessageBrokerRpcHandler\r\n\t\t\textends rpc.RpcHandlerBase\r\n\t\t\timplements IMediateRpcHandler {\r\n\t\r\n\tconstructor(\r\n\t\t@inject(CmT.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer,\r\n\t\t@inject(T.MSG_BROKER_CONNECTOR) private _msgBrokerConn: IMessageBrokerConnector\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t\tGuard.assertArgDefined('_msgBrokerConn', _msgBrokerConn);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRpcHandler.init\r\n\t */\r\n\tpublic init(params?: any): void {\r\n\t\tthis._msgBrokerConn && this._msgBrokerConn.onError(err => this.emitError(err));\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcHandler.handle\r\n\t */\r\n\tpublic handle(action: string, dependencyIdentifier: string | symbol, actionFactory?: rpc.RpcActionFactory) {\r\n\t\tGuard.assertArgDefined('action', action);\r\n\t\tGuard.assertArgDefined('dependencyIdentifier', dependencyIdentifier);\r\n\t\tGuard.assertIsDefined(this._name, '`name` property is required.');\r\n\t\t\r\n\t\tthis._msgBrokerConn.subscribe(`request.${this._name}.${action}`, this.buildHandleFunc.apply(this, arguments));\r\n\t}\r\n\r\n\r\n\tprivate buildHandleFunc(action: string, dependencyIdentifier: string | symbol, actionFactory?: rpc.RpcActionFactory): MessageHandleFunction {\r\n\t\treturn (msg: IMessage) => {\r\n\t\t\tlet request: rpc.IRpcRequest = msg.data,\r\n\t\t\t\treplyTo: string = msg.properties.replyTo,\r\n\t\t\t\tcorrelationId = msg.properties.correlationId;\r\n\t\t\t\r\n\t\t\t(new Promise((resolve, reject) => {\r\n\t\t\t\tlet actionFn = this.resolveActionFunc(action, dependencyIdentifier, actionFactory);\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tactionFn(request.payload, resolve, reject, request);\r\n\t\t\t}))\r\n\t\t\t.then(result => { // When `actionFn` calls `resolve` from inside.\r\n\t\t\t\t// Sends response to reply topic\r\n\t\t\t\treturn this._msgBrokerConn.publish(replyTo, this.createResponse(true, result, request.from), { correlationId });\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tlet errMsg = error;\r\n\t\t\t\t// If error is an uncaught Exception object, that means the action method\r\n\t\t\t\t// has a problem. We should nack to tell message broker to send this message to someone else.\r\n\t\t\t\tif (error instanceof Exception) {\r\n\t\t\t\t\t// TODO: Should log this unexpected error.\r\n\t\t\t\t\terrMsg = error.message;\r\n\t\t\t\t\t// nack(); // Disable this, because we use auto-ack.\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If this is a custom error, which means the action method sends this error\r\n\t\t\t\t// back to caller on purpose.\r\n\t\t\t\treturn this._msgBrokerConn.publish(replyTo, this.createResponse(false, errMsg, request.from), { correlationId });\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}"]}