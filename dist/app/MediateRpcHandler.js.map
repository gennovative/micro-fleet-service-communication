{"version":3,"sources":["app/MediateRpcHandler.ts"],"names":[],"mappings":"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","file":"MediateRpcHandler.js","sourcesContent":["import { injectable, inject, IDependencyContainer, Guard, HandlerContainer,\r\n\tActionFactory, HandlerDetails, Exception, Types as CmT } from 'back-lib-common-util';\r\n\r\nimport { Types as T } from './Types';\r\nimport { IMessageBrokerConnector, IMessage, MessageHandleFunction } from './MessageBrokerConnector';\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface IMediateRpcHandler extends rpc.IRpcHandler {\r\n\t/**\r\n\t * @override IRpcHandler.handle to return Promise<void>\r\n\t */\r\n\thandle(actions: string | string[], dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): Promise<void>;\r\n\t\r\n\t/**\r\n\t * Handles countAll, create, delete, find, patch, update.\r\n\t */\r\n\thandleCRUD(dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): Promise<void>;\r\n}\r\n\r\n@injectable()\r\nexport class MessageBrokerRpcHandler\r\n\textends rpc.RpcHandlerBase\r\n\timplements IMediateRpcHandler {\r\n\r\n\tprivate _container: HandlerContainer;\r\n\r\n\tconstructor(\r\n\t\t@inject(CmT.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer,\r\n\t\t@inject(T.MSG_BROKER_CONNECTOR) private _msgBrokerConn: IMessageBrokerConnector\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t\tGuard.assertArgDefined('_msgBrokerConn', _msgBrokerConn);\r\n\t\tthis._container = HandlerContainer.instance;\r\n\t\tthis._container.dependencyContainer = depContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRpcHandler.init\r\n\t */\r\n\tpublic init(params?: any): void {\r\n\t\tthis._msgBrokerConn && this._msgBrokerConn.onError(err => this.emitError(err));\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcHandler.start\r\n\t */\r\n\tpublic start(): Promise<void> {\r\n\t\treturn this._msgBrokerConn.listen(this.onMessage.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcHandler.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\t// Stop listening then unsbuscribe all topic patterns.\r\n\t\treturn <any>Promise.all([\r\n\t\t\tthis._msgBrokerConn.stopListen(),\r\n\t\t\tthis._msgBrokerConn.unsubscribeAll()\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMediateRpcHandler.handle\r\n\t */\r\n\tpublic async handle(actions: string | string[], dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): Promise<void> {\r\n\t\tGuard.assertIsDefined(this.name, '`name` property is required.');\r\n\t\tGuard.assertIsDefined(this.module, '`module` property is required.');\r\n\r\n\t\tactions = Array.isArray(actions) ? actions : [actions];\r\n\r\n\t\treturn <any>Promise.all(\r\n\t\t\tactions.map(a => {\r\n\t\t\t\tthis._container.register(a, dependencyIdentifier, actionFactory);\r\n\t\t\t\treturn this._msgBrokerConn.subscribe(`request.${this.module}.${a}`);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMediateRpcHandler.handleCRUD\r\n\t */\r\n\tpublic handleCRUD(dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): Promise<void> {\r\n\t\treturn this.handle(\r\n\t\t\t['countAll', 'create', 'delete', 'find', 'patch', 'update'],\r\n\t\t\tdependencyIdentifier, actionFactory\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprivate onMessage(msg: IMessage): void {\r\n\t\tlet action = msg.raw.fields.routingKey.match(/[^\\.]+$/)[0],\r\n\t\t\trequest: rpc.IRpcRequest = msg.data,\r\n\t\t\tcorrelationId = msg.properties.correlationId,\r\n\t\t\treplyTo: string = msg.properties.replyTo;\r\n\r\n\t\t(new Promise((resolve, reject) => {\r\n\t\t\tlet actionFn = this._container.resolve(action);\r\n\t\t\ttry {\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tlet output: any = actionFn(request.payload, resolve, reject, request);\r\n\t\t\t\tif (output instanceof Promise) {\r\n\t\t\t\t\toutput.catch(reject); // Catch async exceptions.\r\n\t\t\t\t}\r\n\t\t\t} catch (err) { // Catch normal exceptions.\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t}))\r\n\t\t.then(result => { // When `actionFn` calls `resolve` from inside.\r\n\t\t\t// Sends response to reply topic\r\n\t\t\treturn this._msgBrokerConn.publish(replyTo, this.createResponse(true, result, request.from), { correlationId });\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tlet errObj = this.createError(error);\r\n\t\t\t// nack(); // Disable this, because we use auto-ack.\r\n\t\t\treturn this._msgBrokerConn.publish(replyTo, this.createResponse(false, errObj, request.from), { correlationId });\r\n\t\t})\r\n\t\t// Catch error thrown by `createError()`\r\n\t\t.catch(this.emitError.bind(this));\r\n\t}\r\n\r\n}"]}