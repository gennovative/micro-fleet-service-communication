{"version":3,"sources":["app/MessageBrokerAddOn.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,yEAA+D;AAC/D,yEAAkF;AAClF,+DAAiE;AAGjE,mCAAqC;AAIrC,IAAa,kBAAkB,GAA/B;IAEC,YACuC,eAAuC,EACrC,aAAsC;QADxC,oBAAe,GAAf,eAAe,CAAwB;QACrC,kBAAa,GAAb,aAAa,CAAyB;QAE9E,4BAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;QAC3D,4BAAK,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;IACxD,CAAC;IAED;;OAEG;IACI,IAAI;QACV,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAChC,IAAI,GAAuB;YAC1B,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,eAAe,CAAC;YAC1C,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,mBAAmB,CAAC;YAC3C,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,mBAAmB,CAAC;YAC3C,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,mBAAmB,CAAC;YAC3C,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,gBAAgB,CAAC;YACrC,cAAc,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,yBAAyB,CAAC;YACvD,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,yCAAC,CAAC,yBAAyB,CAAC;SACzD,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED;;OAEG;IACI,UAAU;QAChB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,OAAO;QACb,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;IACxC,CAAC;CACD,CAAA;AAxCY,kBAAkB;IAD9B,iCAAU,EAAE;IAIV,WAAA,6BAAM,CAAC,iCAAI,CAAC,eAAe,CAAC,CAAA;IAC5B,WAAA,6BAAM,CAAC,aAAC,CAAC,oBAAoB,CAAC,CAAA;;GAJpB,kBAAkB,CAwC9B;AAxCY,gDAAkB","file":"MessageBrokerAddOn.js","sourcesContent":["import { MbSettingKeys as S } from 'back-lib-common-constants';\r\nimport { IConfigurationProvider, Types as ConT } from 'back-lib-common-contracts';\r\nimport { injectable, inject, Guard } from 'back-lib-common-util';\r\n\r\nimport { IMessageBrokerConnector, IConnectionOptions} from './MessageBrokerConnector';\r\nimport { Types as T } from './Types';\r\n\r\n\r\n@injectable()\r\nexport class MessageBrokerAddOn implements IServiceAddOn {\r\n\r\n\tconstructor(\r\n\t\t@inject(ConT.CONFIG_PROVIDER) private _configProvider: IConfigurationProvider,\r\n\t\t@inject(T.MSG_BROKER_CONNECTOR) private _msgBrokerCnn: IMessageBrokerConnector\r\n\t) {\r\n\t\tGuard.assertArgDefined('_configProvider', _configProvider);\r\n\t\tGuard.assertArgDefined('_msgBrokerCnn', _msgBrokerCnn);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.init\r\n\t */\r\n\tpublic init(): Promise<void> {\r\n\t\tlet cfgAdt = this._configProvider,\r\n\t\t\topts: IConnectionOptions = {\r\n\t\t\t\thostAddress: cfgAdt.get(S.MSG_BROKER_HOST),\r\n\t\t\t\tusername: cfgAdt.get(S.MSG_BROKER_USERNAME),\r\n\t\t\t\tpassword: cfgAdt.get(S.MSG_BROKER_PASSWORD),\r\n\t\t\t\texchange: cfgAdt.get(S.MSG_BROKER_EXCHANGE),\r\n\t\t\t\tqueue: cfgAdt.get(S.MSG_BROKER_QUEUE),\r\n\t\t\t\treconnectDelay: cfgAdt.get(S.MSG_BROKER_RECONN_TIMEOUT),\r\n\t\t\t\tmessageExpiredIn: cfgAdt.get(S.MSG_BROKER_RECONN_TIMEOUT),\r\n\t\t\t};\r\n\t\treturn this._msgBrokerCnn.connect(opts);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.deadLetter\r\n\t */\r\n\tpublic deadLetter(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\treturn this._msgBrokerCnn.disconnect();\r\n\t}\r\n}"]}