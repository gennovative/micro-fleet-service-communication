{"version":3,"sources":["app/MessageBrokerConnector.ts"],"names":[],"mappings":"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","file":"MessageBrokerConnector.js","sourcesContent":["import { EventEmitter } from 'events';\r\n\r\nimport * as shortid from 'shortid';\r\nimport * as amqp from 'amqplib';\r\nimport * as _ from 'lodash';\r\n\r\nimport { injectable, Exception, CriticalException, MinorException,\r\n\tGuard } from 'back-lib-common-util';\r\n\r\n\r\nexport type MessageHandleFunction = (msg: IMessage, ack?: () => void, nack?: () => void) => void;\r\n\r\nexport interface IMessage {\r\n\tdata: any;\r\n\traw: amqp.Message;\r\n\tproperties?: IPublishOptions;\r\n}\r\n\r\nexport interface IPublishOptions {\r\n\tcontentType?: 'text/plain' | 'application/json';\r\n\tcontentEncoding?: string;\r\n\tcorrelationId?: string;\r\n\treplyTo?: string;\r\n}\r\n\r\nexport interface IConnectionOptions {\r\n\t/**\r\n\t * IP address or host name where message broker is located.\r\n\t */\r\n\thostAddress: string;\r\n\r\n\t/**\r\n\t * Username to login to message broker.\r\n\t */\r\n\tusername: string;\r\n\r\n\t/**\r\n\t * Password to login to message broker.\r\n\t */\r\n\tpassword: string;\r\n\t\r\n\t/**\r\n\t * Exchange name\r\n\t */\r\n\texchange: string;\r\n\r\n\t/**\r\n\t * Milliseconds to wait before trying to reconnect to message broker.\r\n\t */\r\n\treconnectDelay?: number;\r\n\r\n\t/**\r\n\t * The default queue name to bind.\r\n\t * If not specified or given falsey values (empty string, null,...), a queue with random name will be created.\r\n\t * IMessageBrokerConnector's implementation may allow connecting to many queues.\r\n\t * But each TopicMessageBrokerConnector instance connects to only one queue.\r\n\t */\r\n\tqueue?: string;\r\n\r\n\t/**\r\n\t * Milliseconds to expire messages arriving in the queue.\r\n\t */\r\n\tmessageExpiredIn?: number;\r\n}\r\n\r\nexport interface IMessageBrokerConnector {\r\n\r\n\t/**\r\n\t * Gets or sets queue name.\r\n\t * Queue can only be changed before it is bound.\r\n\t * Queue is bound on the first call to `subscribe()` method.\r\n\t * @throws Error if changing queue after it is bound.\r\n\t */\r\n\tqueue: string;\r\n\r\n\t/**\r\n\t * Gets or sets milliseconds to expire messages arriving in the queue.\r\n\t * Can only be changed before queue is bound.\r\n\t * Queue is bound on the first call to `subscribe()` method.\r\n\t * @throws Error if changing queue after it is bound.\r\n\t */\r\n\tmessageExpiredIn: number;\r\n\r\n\t/**\r\n\t * Gets array of subscribed matching patterns.\r\n\t */\r\n\treadonly subscribedPatterns: string[];\r\n\r\n\t/**\r\n\t * Creates a connection to message broker engine.\r\n\t * @param {IConnectionOptions} options\r\n\t */\r\n\tconnect(options: IConnectionOptions): Promise<void>;\r\n\t\r\n\t/**\r\n\t * Closes all channels and the connection.\r\n\t */\r\n\tdisconnect(): Promise<void>;\r\n\r\n\t/**\r\n\t * Deletes queue.\r\n\t */\r\n\tdeleteQueue(): Promise<void>;\r\n\r\n\t/**\r\n\t * Deletes all messages in queue.\r\n\t * Note that this won't remove messages that have been delivered but not yet acknowledged.\r\n\t * They will remain, and may be requeued under some circumstances\r\n\t * (e.g., if the channel to which they were delivered closes without acknowledging them).\r\n\t * \r\n\t * @returns Number of deleted message.\r\n\t */\r\n\temptyQueue(): Promise<number>;\r\n\r\n\t/**\r\n\t * Starts receiving messages.\r\n\t * @param {function} onMessage - Callback to invoke when there is an incomming message.\r\n\t * @param {boolean} noAck - If true, received message is acknowledged automatically.\r\n\t * \tDefault should be `true`.\r\n\t */\r\n\tlisten(onMessage: MessageHandleFunction, noAck?: boolean): Promise<void>;\r\n\r\n\t/**\r\n\t * Stops receiving messages.\r\n\t */\r\n\tstopListen(): Promise<void>;\r\n\r\n\t/**\r\n\t * Sends `message` to the broker and label the message with `topic`.\r\n\t * @param {string} topic - A name to label the message with. Should be in format \"xxx.yyy.zzz\".\r\n\t * @param {any} payload - A message to send to broker.\r\n\t * @param {IPublishOptions} options - Options to add to message properties.\r\n\t */\r\n\tpublish(topic: string, payload: any, options?: IPublishOptions): Promise<void>;\r\n\r\n\t/**\r\n\t * Listens to messages whose label matches `matchingPattern`.\r\n\t * @param {string} matchingPattern - Pattern to match with message label. Should be in format \"xx.*\" or \"xx.#.#\".\r\n\t */\r\n\tsubscribe(matchingPattern: string): Promise<void>;\r\n\r\n\t/**\r\n\t * Stops listening to a topic pattern.\r\n\t */\r\n\tunsubscribe(matchingPattern: string): Promise<void>;\r\n\r\n\t/**\r\n\t * Stops listening to all subscriptions.\r\n\t */\r\n\tunsubscribeAll(): Promise<void>;\r\n\r\n\t/**\r\n\t * Registers a listener to handle errors.\r\n\t */\r\n\tonError(handler: (err) => void): void;\r\n}\r\n\r\n@injectable()\r\nexport class TopicMessageBrokerConnector implements IMessageBrokerConnector {\r\n\t\r\n\tprivate static CHANNEL_RECREATE_DELAY = 100; // Millisecs\r\n\r\n\tprivate _connectionPrm: Promise<amqp.Connection>;\r\n\t\r\n\t// Each microservice has 2 channels, one for consuming and the other for publishing.\r\n\tprivate _publishChanPrm: Promise<amqp.Channel>;\r\n\tprivate _consumeChanPrm: Promise<amqp.Channel>;\r\n\r\n\tprivate _consumerTag: string;\r\n\tprivate _exchange: string;\r\n\tprivate _emitter: EventEmitter;\r\n\tprivate _isConnected: boolean;\r\n\tprivate _isConnecting: boolean;\r\n\tprivate _queue: string;\r\n\tprivate _queueBound: boolean;\r\n\tprivate _messageExpiredIn: number;\r\n\tprivate _subscribedPatterns: string[];\r\n\r\n\tconstructor() {\r\n\t\tthis._subscribedPatterns = [];\r\n\t\tthis._emitter = new EventEmitter();\r\n\t\tthis._queueBound = false;\r\n\t\tthis._isConnected = false;\r\n\t\tthis._isConnecting = false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.queue\r\n\t */\r\n\tpublic get queue(): string {\r\n\t\treturn this._queue;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.queue\r\n\t */\r\n\tpublic set queue(name: string) {\r\n\t\tif (this._queueBound) {\r\n\t\t\tthrow new MinorException('Cannot change queue after binding!');\r\n\t\t}\r\n\t\tthis._queue = name || `auto-gen-${shortid.generate()}`;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.messageExpiredIn\r\n\t */\r\n\tpublic get messageExpiredIn(): number {\r\n\t\treturn this._messageExpiredIn;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.messageExpiredIn\r\n\t */\r\n\tpublic set messageExpiredIn(val: number) {\r\n\t\tif (this._queueBound) {\r\n\t\t\tthrow new MinorException('Cannot change message expiration after queue has been bound!');\r\n\t\t}\r\n\t\tthis._messageExpiredIn = (val >= 0) ? val : 0; // Unlimited\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.subscribedPatterns\r\n\t */\r\n\tpublic get subscribedPatterns(): string[] {\r\n\t\treturn this._subscribedPatterns;\r\n\t}\r\n\r\n\r\n\tprivate get isListening(): boolean {\r\n\t\treturn this._consumerTag != null;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.connect\r\n\t */\r\n\tpublic connect(options: IConnectionOptions): Promise<void> {\r\n\t\tlet credentials = '';\r\n\t\t\r\n\t\tthis._exchange = options.exchange;\r\n\t\tthis.queue = options.queue;\r\n\t\tthis.messageExpiredIn = options.messageExpiredIn;\r\n\t\tthis._isConnecting = true;\r\n\r\n\t\toptions.reconnectDelay = (options.reconnectDelay >= 0) \r\n\t\t\t? options.reconnectDelay\r\n\t\t\t: 3000; // 3s\r\n\r\n\t\t// Output:\r\n\t\t// - \"usr@pass\"\r\n\t\t// - \"@pass\"\r\n\t\t// - \"usr@\"\r\n\t\t// - \"\"\r\n\t\tif (!_.isEmpty(options.username) || !_.isEmpty(options.password)) {\r\n\t\t\tcredentials = `${options.username || ''}:${options.password || ''}@`;\r\n\t\t}\r\n\r\n\t\t// URI format: amqp://usr:pass@10.1.2.3/vhost\r\n\t\treturn <any>this.createConnection(credentials, options);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.disconnect\r\n\t */\r\n\tpublic async disconnect(): Promise<void> {\r\n\t\ttry {\r\n\t\t\tif (!this._connectionPrm || (!this._isConnected && !this._isConnecting)) {\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\r\n\t\t\tlet ch: amqp.Channel,\r\n\t\t\t\tpromises = [];\r\n\r\n\t\t\tif (this._consumeChanPrm) {\r\n\t\t\t\tch = await this._consumeChanPrm;\r\n\t\t\t\tch.removeAllListeners();\r\n\t\t\t\t// Close consuming channel\r\n\t\t\t\tpromises.push(ch.close());\r\n\t\t\t}\r\n\r\n\t\t\tif (this._publishChanPrm) {\r\n\t\t\t\tch = await this._publishChanPrm;\r\n\t\t\t\tch.removeAllListeners();\r\n\t\t\t\t// Close publishing channel\r\n\t\t\t\tpromises.push(ch.close());\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure all channels are closed before we close connection.\r\n\t\t\t// Otherwise we will have dangling channels until application shuts down.\r\n\t\t\tawait Promise.all(promises);\r\n\r\n\t\t\tif (this._connectionPrm) {\r\n\t\t\t\tlet conn: amqp.Connection = await this._connectionPrm;\r\n\t\t\t\tconn.removeAllListeners();\r\n\t\t\t\t// Close connection, causing all temp queues to be deleted.\r\n\t\t\t\treturn conn.close();\r\n\t\t\t}\r\n\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Connection closing error');\r\n\t\t} finally {\r\n\t\t\tthis._connectionPrm = null;\r\n\t\t\tthis._publishChanPrm = null;\r\n\t\t\tthis._consumeChanPrm = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.deleteQueue\r\n\t */\r\n\tpublic async deleteQueue(): Promise<void> {\r\n\t\tthis.assertConnection();\r\n\t\tif (this.isListening) {\r\n\t\t\tthrow new MinorException('Must stop listening before deleting queue');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet ch = await this._consumeChanPrm;\r\n\t\t\tawait ch.deleteQueue(this.queue);\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Queue deleting failed');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.emptyQueue\r\n\t */\r\n\tpublic async emptyQueue(): Promise<number> {\r\n\t\tthis.assertConnection();\r\n\r\n\t\ttry {\r\n\t\t\tlet ch = await this._consumeChanPrm,\r\n\t\t\t\tresult = await ch.purgeQueue(this.queue);\r\n\t\t\treturn result.messageCount;\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Queue emptying failed');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.listen\r\n\t */\r\n\tpublic async listen(onMessage: MessageHandleFunction, noAck: boolean = true): Promise<void> {\r\n\t\tGuard.assertArgFunction('onMessage', onMessage);\r\n\t\tthis.assertConnection();\r\n\r\n\t\ttry {\r\n\t\t\tlet ch = await this._consumeChanPrm;\r\n\t\t\tlet conResult = await ch.consume(this.queue,\r\n\t\t\t\t(msg: amqp.Message) => {\r\n\t\t\t\t\tlet ack = () => ch.ack(msg),\r\n\t\t\t\t\t\tnack = () => ch.nack(msg);\r\n\r\n\t\t\t\t\tonMessage(this.parseMessage(msg), ack, nack);\r\n\t\t\t\t}, \r\n\t\t\t\t{ noAck }\r\n\t\t\t);\r\n\t\t\tthis._consumerTag = conResult.consumerTag;\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Error when start listening');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.stopListen\r\n\t */\r\n\tpublic async stopListen(): Promise<void> {\r\n\t\tif (!this.isListening) { return Promise.resolve(); }\r\n\t\tthis.assertConnection();\r\n\r\n\t\ttry {\r\n\t\t\tlet ch = await this._consumeChanPrm;\r\n\r\n\t\t\t// onMessage callback will never be called again.\r\n\t\t\tawait ch.cancel(this._consumerTag);\r\n\t\t\tthis._consumerTag = null;\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Error when stop listening');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.publish\r\n\t */\r\n\tpublic async publish(topic: string, payload: any, options?: IPublishOptions): Promise<void> {\r\n\t\tGuard.assertArgNotEmpty('topic', topic);\r\n\t\tGuard.assertArgNotEmpty('message', payload);\r\n\t\tthis.assertConnection();\r\n\t\ttry {\r\n\t\t\tif (!this._publishChanPrm) {\r\n\t\t\t\t// Create a new publishing channel if there is not already, and from now on we publish to this only channel.\r\n\t\t\t\tthis._publishChanPrm = this.createPublishChannel();\r\n\t\t\t}\r\n\t\t\tlet ch: amqp.Channel = await this._publishChanPrm,\r\n\t\t\t\topt: amqp.Options.Publish;\r\n\t\t\tlet [msg, opts] = this.buildMessage(payload, options);\r\n\r\n\t\t\t// We publish to exchange, then the exchange will route to appropriate consuming queue.\r\n\t\t\tch.publish(this._exchange, topic, msg, opts);\r\n\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Publishing error');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.subscribe\r\n\t */\r\n\tpublic async subscribe(matchingPattern: string): Promise<void> {\r\n\t\tGuard.assertArgNotEmpty('matchingPattern', matchingPattern);\r\n\t\tthis.assertConnection();\r\n\r\n\t\ttry {\r\n\t\t\tlet channelPromise = this._consumeChanPrm;\r\n\t\t\tif (!channelPromise) {\r\n\t\t\t\t// Create a new consuming channel if there is not already, and from now on we listen to this only channel.\r\n\t\t\t\tchannelPromise = this._consumeChanPrm = this.createConsumeChannel();\r\n\t\t\t}\r\n\r\n\t\t\t// The consuming channel should bind to only one queue, but that queue can be routed with multiple keys.\r\n\t\t\tawait this.bindQueue(await channelPromise, matchingPattern);\r\n\r\n\t\t\tthis.moreSub(matchingPattern);\r\n\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Subscription error');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.unsubscribe\r\n\t */\r\n\tpublic async unsubscribe(matchingPattern: string): Promise<void> {\r\n\t\tthis.assertConnection();\r\n\t\ttry {\r\n\t\t\tif (!this._consumeChanPrm) { return; }\r\n\t\t\t\r\n\t\t\tthis.lessSub(matchingPattern);\r\n\t\t\tlet ch = await this._consumeChanPrm;\r\n\t\t\tawait ch.unbindQueue(this._queue, this._exchange, matchingPattern);\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, `Failed to unsubscribe pattern \"${matchingPattern}\"`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.unsubscribeAll\r\n\t */\r\n\tpublic async unsubscribeAll(): Promise<void> {\r\n\t\treturn <any>Promise.all(\r\n\t\t\tthis._subscribedPatterns.map(this.unsubscribe.bind(this))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @see IMessageBrokerConnector.onError\r\n\t */\r\n\tpublic onError(handler: (err) => void): void {\r\n\t\tthis._emitter.on('error', handler);\r\n\t}\r\n\r\n\r\n\tprivate assertConnection(): void {\r\n\t\tGuard.assertIsDefined(this._connectionPrm,\r\n\t\t\t'Connection to message broker is not established!');\r\n\t\tGuard.assertIsTruthy(this._isConnected || this._isConnecting,\r\n\t\t\t'Connection to message broker is not established or has been disconnected!');\r\n\t}\r\n\r\n\tprivate createConnection(credentials: string, options: IConnectionOptions): Promise<amqp.Connection> {\r\n\t\treturn this._connectionPrm = <any>amqp.connect(`amqp://${credentials}${options.hostAddress}`)\r\n\t\t\t.then((conn: amqp.Connection) => {\r\n\t\t\t\tthis._isConnected = true;\r\n\t\t\t\tthis._isConnecting = false;\r\n\t\t\t\tconn.on('error', (err) => {\r\n\t\t\t\t\tthis._emitter.emit('error', err);\r\n\t\t\t\t})\r\n\t\t\t\t.on('close', () => {\r\n\t\t\t\t\tthis._isConnected = false;\r\n\t\t\t\t\tthis.reconnect(credentials, options);\r\n\t\t\t\t});\r\n\t\t\t\treturn conn;\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\treturn this.handleError(err, 'Connection creation error');\r\n\t\t\t});\r\n\t}\r\n\r\n\tprivate reconnect(credentials: string, options: IConnectionOptions): void {\r\n\t\tthis._isConnecting = true;\r\n\t\tthis._connectionPrm = new Promise<amqp.Connection>((resolve, reject) => {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.createConnection(credentials, options)\r\n\t\t\t\t\t.then(resolve)\r\n\t\t\t\t\t.catch(reject);\r\n\t\t\t}, options.reconnectDelay);\r\n\t\t});\r\n\t\tthis.resetChannels();\r\n\t}\r\n\r\n\tprivate resetChannels(): void {\r\n\t\tif (this._consumeChanPrm) {\r\n\t\t\tthis._consumeChanPrm = this._consumeChanPrm\r\n\t\t\t\t.then(ch => ch.removeAllListeners())\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\treturn this.createConsumeChannel();\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this._publishChanPrm) {\r\n\t\t\tthis._publishChanPrm = this._publishChanPrm\r\n\t\t\t\t.then(ch => ch.removeAllListeners())\r\n\t\t\t\t.then(() => this.createPublishChannel());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async createConsumeChannel(): Promise<amqp.Channel> {\r\n\t\treturn this.createChannel()\r\n\t\t\t.then(ch => {\r\n\t\t\t\tch.once('close', () => {\r\n\t\t\t\t\tlet oldCh = this._consumeChanPrm;\r\n\r\n\t\t\t\t\t// Delay a little bit to see if underlying connection is still alive\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t// If connection has reset and already created new channels\r\n\t\t\t\t\t\tif (this._consumeChanPrm !== oldCh) { return; }\r\n\r\n\t\t\t\t\t\tthis._consumeChanPrm = this.createConsumeChannel();\r\n\t\t\t\t\t}, TopicMessageBrokerConnector.CHANNEL_RECREATE_DELAY);\r\n\t\t\t\t});\r\n\t\t\t\treturn ch;\r\n\t\t\t});\r\n\t}\r\n\r\n\tprivate async createPublishChannel(): Promise<amqp.Channel> {\r\n\t\treturn this.createChannel()\r\n\t\t\t.then(ch => {\r\n\t\t\t\tch.once('close', () => {\r\n\t\t\t\t\tlet oldCh = this._publishChanPrm;\r\n\r\n\t\t\t\t\t// Delay a little bit to see if underlying connection is still alive\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// If connection has reset and already created new channels\r\n\t\t\t\t\t\tif (this._publishChanPrm !== oldCh) { return; }\r\n\r\n\t\t\t\t\t\tthis._publishChanPrm = this.createPublishChannel();\r\n\t\t\t\t\t}, TopicMessageBrokerConnector.CHANNEL_RECREATE_DELAY);\r\n\t\t\t\t});\r\n\t\t\t\treturn ch;\r\n\t\t\t});\r\n\t}\r\n\r\n\tprivate async createChannel(): Promise<amqp.Channel> {\r\n\t\tconst EXCHANGE_TYPE = 'topic';\r\n\r\n\t\ttry {\r\n\t\t\tlet conn = await this._connectionPrm,\r\n\t\t\t\tch = await conn.createChannel();\r\n\r\n\t\t\t\t// Tell message broker to create an exchange with this name if there's not any already.\r\n\t\t\t\t// Setting exchange as \"durable\" means the exchange with same name will be re-created after the message broker restarts,\r\n\t\t\t\t// but all queues and waiting messages will be lost.\r\n\t\t\tawait ch.assertExchange(this._exchange, EXCHANGE_TYPE, {durable: true});\r\n\r\n\t\t\tch.on('error', (err) => {\r\n\t\t\t\tthis._emitter.emit('error', err);\r\n\t\t\t});\r\n\t\t\treturn ch;\r\n\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Channel creation error');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async bindQueue(channel: amqp.Channel, matchingPattern: string): Promise<string> {\r\n\t\ttry {\r\n\t\t\tlet queue = this.queue,\r\n\t\t\t\tisTempQueue = (queue.indexOf('auto-gen') == 0);\r\n\r\n\t\t\t// Setting queue as \"exclusive\" to delete the temp queue when connection closes.\r\n\t\t\tawait channel.assertQueue(queue, {\r\n\t\t\t\texclusive: isTempQueue,\r\n\t\t\t\tmessageTtl: this.messageExpiredIn,\r\n\t\t\t\tautoDelete: true\r\n\t\t\t});\r\n\r\n\t\t\tawait channel.bindQueue(queue, this._exchange, matchingPattern);\r\n\t\t\tthis._queueBound = true;\r\n\r\n\t\t} catch (err) {\r\n\t\t\treturn this.handleError(err, 'Queue binding error');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate unbindQueue(channelPromise: Promise<amqp.Channel>, matchingPattern: string): Promise<void> {\r\n\t\treturn <any>channelPromise.then(\r\n\t\t\tch => ch.unbindQueue(this._queue, this._exchange, matchingPattern)\r\n\t\t);\r\n\t}\r\n\r\n\tprivate handleError(err, message: string): Promise<never> {\r\n\t\tif (err instanceof Exception) {\r\n\t\t\t// If this is already a wrapped exception.\r\n\t\t\treturn Promise.reject(err);\r\n\t\t}\r\n\t\treturn Promise.reject(new CriticalException(`${message}: ${err}`));\r\n\t}\r\n\t\r\n\tprivate moreSub(pattern: string): void {\r\n\t\tif (!this._subscribedPatterns.includes(pattern)) {\r\n\t\t\tthis._subscribedPatterns.push(pattern);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate lessSub(pattern: string): void {\r\n\t\tlet pos = this._subscribedPatterns.indexOf(pattern);\r\n\t\tif (pos >= 0) {\r\n\t\t\tthis._subscribedPatterns.splice(pos, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate buildMessage(payload: string | Json | JsonArray, options?: IPublishOptions): Array<any> {\r\n\t\tlet msg: string;\r\n\t\toptions = options || {};\r\n\r\n\t\tif (_.isString(payload)) {\r\n\t\t\tmsg = payload;\r\n\t\t\toptions.contentType = 'text/plain';\r\n\t\t} else {\r\n\t\t\tmsg = JSON.stringify(payload);\r\n\t\t\toptions.contentType = 'application/json';\r\n\t\t}\r\n\r\n\t\treturn [Buffer.from(msg), options];\r\n\t}\r\n\r\n\tprivate parseMessage(raw: amqp.Message): IMessage {\r\n\t\tlet msg: Partial<IMessage> = {\r\n\t\t\traw,\r\n\t\t\tproperties: raw.properties || {}\r\n\t\t};\r\n\r\n\t\tif (msg.properties.contentType == 'text/plain') {\r\n\t\t\tmsg.data = raw.content.toString(msg.properties.contentEncoding);\r\n\t\t} else {\r\n\t\t\tmsg.data = JSON.parse(<any>raw.content);\r\n\t\t}\r\n\r\n\t\treturn <IMessage>msg;\r\n\t}\r\n}"]}