{"version":3,"sources":["app/DirectRpcCaller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,kDAAkD;AAElD,+DAAyD;AAEzD,mCAAmC;AAanC,IAAa,aAAa,GAA1B,mBACG,SAAQ,GAAG,CAAC,aAAa;IAM3B;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED,IAAW,WAAW;QACrB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAED,IAAW,WAAW,CAAC,GAAW;QACjC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IACzB,CAAC;IAGD;;OAEG;IACI,IAAI,CAAC,KAAW;IACvB,CAAC;IAED;;OAEG;IACU,IAAI,CAAC,UAAkB,EAAE,MAAc,EAAE,MAAY;;YACjE,4BAAK,CAAC,gBAAgB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;YACjD,4BAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACzC,4BAAK,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,uBAAuB,CAAC,CAAC;YAElE,IAAI,OAAO,GAAoB;gBAC7B,IAAI,EAAE,IAAI,CAAC,KAAK;gBAChB,EAAE,EAAE,UAAU;gBACd,OAAO,EAAE,MAAM;aACf,EACD,OAAO,GAAoB;gBAC1B,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,UAAU,IAAI,CAAC,YAAY,IAAI,UAAU,IAAI,MAAM,EAAE;gBAC1D,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,IAAI,CAAC,6CAA6C;aACxD,CAAC;YAEH,IAAI,CAAC;gBACJ,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;YAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACtB,MAAM,WAAW,CAAC,KAAK,CAAC;YACzB,CAAC;QACF,CAAC;KAAA;CACD,CAAA;AArDY,aAAa;IADzB,iCAAU,EAAE;;GACA,aAAa,CAqDzB;AArDY,sCAAa","file":"DirectRpcCaller.js","sourcesContent":["import { EventEmitter } from 'events';\r\n\r\nimport * as request from 'request-promise-native';\r\n\r\nimport { injectable, Guard } from 'back-lib-common-util';\r\n\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface IDirectRpcCaller extends rpc.IRpcCaller {\r\n\t/**\r\n\t * IP address or host name including port number.\r\n\t * Do not include protocol (http, ftp...) because different class implementations\r\n\t * will prepend different protocols.\r\n\t */\r\n\tbaseAddress: string;\r\n}\r\n\r\n@injectable()\r\nexport class HttpRpcCaller\r\n\t\t\textends rpc.RpcCallerBase\r\n\t\t\timplements IDirectRpcCaller {\r\n\r\n\tprivate _baseAddress: string;\r\n\tprivate _requestMaker: (options) => Promise<any>;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._requestMaker = request;\r\n\t}\r\n\r\n\tpublic get baseAddress(): string {\r\n\t\treturn this._baseAddress;\r\n\t}\r\n\r\n\tpublic set baseAddress(val: string) {\r\n\t\tthis._baseAddress = val;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRpcCaller.init\r\n\t */\r\n\tpublic init(param?: any): void {\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcCaller.call\r\n\t */\r\n\tpublic async call(moduleName: string, action: string, params?: any): Promise<rpc.IRpcResponse> {\r\n\t\tGuard.assertArgDefined('moduleName', moduleName);\r\n\t\tGuard.assertArgDefined('action', action);\r\n\t\tGuard.assertIsDefined(this._baseAddress, 'Base URL must be set!');\r\n\r\n\t\tlet request: rpc.IRpcRequest = {\r\n\t\t\t\tfrom: this._name,\r\n\t\t\t\tto: moduleName,\r\n\t\t\t\tpayload: params\r\n\t\t\t},\r\n\t\t\toptions: request.Options = {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\turi: `http://${this._baseAddress}/${moduleName}/${action}`,\r\n\t\t\t\tbody: request,\r\n\t\t\t\tjson: true // Automatically stringifies the body to JSON\r\n\t\t\t};\r\n\r\n\t\ttry {\r\n\t\t\treturn await this._requestMaker(options);\r\n\t\t} catch (rawResponse) {\r\n\t\t\tthrow rawResponse.error;\r\n\t\t}\r\n\t}\r\n}"]}