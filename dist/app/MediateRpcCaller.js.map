{"version":3,"sources":["app/MediateRpcCaller.ts"],"names":[],"mappings":"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","file":"MediateRpcCaller.js","sourcesContent":["import { EventEmitter } from 'events';\r\n\r\nimport * as shortid from 'shortid';\r\nimport { injectable, inject, IDependencyContainer, Guard, MinorException } from 'back-lib-common-util';\r\n\r\nimport { Types as T } from './Types';\r\nimport { IMessageBrokerConnector, IMessage } from './MessageBrokerConnector';\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface IMediateRpcCaller extends rpc.IRpcCaller {\r\n}\r\n\r\n@injectable()\r\nexport class MessageBrokerRpcCaller\r\n\t\t\textends rpc.RpcCallerBase\r\n\t\t\timplements IMediateRpcCaller {\r\n\r\n\tconstructor(\r\n\t\t@inject(T.MSG_BROKER_CONNECTOR) private _msgBrokerConn: IMessageBrokerConnector\r\n\t) {\r\n\t\tsuper();\r\n\t\tGuard.assertArgDefined('_msgBrokerConn', _msgBrokerConn);\r\n\r\n\t\tthis._msgBrokerConn.queue = ''; // Make sure we only use temporary unique queue.\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcCaller.init\r\n\t */\r\n\tpublic init(params?: any): void {\r\n\t\tlet expire = this._msgBrokerConn.messageExpiredIn;\r\n\t\tthis._msgBrokerConn.messageExpiredIn = expire > 0 ? expire : 30000; // Make sure we only use temporary unique queue.\r\n\t\tthis._msgBrokerConn.onError(err => this.emitError(err));\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcCaller.dispose\r\n\t */\r\n\tpublic async dispose(): Promise<void> {\r\n\t\tawait super.dispose();\r\n\t\tthis._msgBrokerConn = null;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcCaller.call\r\n\t */\r\n\tpublic call(moduleName: string, action: string, params?: any): Promise<rpc.IRpcResponse> {\r\n\t\tGuard.assertArgDefined('moduleName', moduleName);\r\n\t\tGuard.assertArgDefined('action', action);\r\n\r\n\t\treturn new Promise<rpc.IRpcResponse>((resolve, reject) => {\r\n\t\t\t// There are many requests to same `requestTopic` and they listen to same `responseTopic`,\r\n\t\t\t// A request only cares about a response with same `correlationId`.\r\n\t\t\tconst correlationId = shortid.generate(),\r\n\t\t\t\treplyTo = `response.${moduleName}.${action}@${correlationId}`,\r\n\t\t\t\tconn = this._msgBrokerConn;\r\n\r\n\t\t\tconn.subscribe(replyTo)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tlet token;\r\n\t\t\t\t\tlet onMessage = async (msg: IMessage) => {\r\n\t\t\t\t\t\tclearTimeout(token);\r\n\t\t\t\t\t\t// We got what we want, stop consuming.\r\n\t\t\t\t\t\tawait conn.unsubscribe(replyTo);\r\n\t\t\t\t\t\tawait conn.stopListen();\r\n\r\n\t\t\t\t\t\tlet response: rpc.IRpcResponse = msg.data;\r\n\t\t\t\t\t\tif (response.isSuccess) {\r\n\t\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treject(this.rebuildError(response.payload));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// In case this request never has response.\r\n\t\t\t\t\ttoken = setTimeout(() => {\r\n\t\t\t\t\t\tthis._emitter && this._emitter.removeListener(correlationId, onMessage);\r\n\t\t\t\t\t\tthis._msgBrokerConn && conn.unsubscribe(replyTo).catch(() => { /* Swallow */ });\r\n\t\t\t\t\t\treject(new MinorException('Response waiting timeout'));\r\n\t\t\t\t\t}, this.timeout);\r\n\r\n\t\t\t\t\tthis._emitter.once(correlationId, onMessage);\r\n\r\n\t\t\t\t\treturn conn.listen((msg: IMessage) => {\r\n\t\t\t\t\t\t// Announce that we've got a response with this correlationId.\r\n\t\t\t\t\t\tthis._emitter.emit(msg.properties.correlationId, msg);\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tlet request: rpc.IRpcRequest = {\r\n\t\t\t\t\t\tfrom: this.name,\r\n\t\t\t\t\t\tto: moduleName,\r\n\t\t\t\t\t\tpayload: params\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Send request, marking the message with correlationId.\r\n\t\t\t\t\treturn this._msgBrokerConn.publish(`request.${moduleName}.${action}`, request, \r\n\t\t\t\t\t\t{ correlationId, replyTo });\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err => {\r\n\t\t\t\t\treject(new MinorException(`RPC error: ${err}`));\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n}"]}