{"version":3,"sources":["app/DirectRpcHandler.ts"],"names":[],"mappings":"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","file":"DirectRpcHandler.js","sourcesContent":["import * as http from 'http';\r\n\r\nimport * as express from 'express';\r\nimport * as bodyParser from 'body-parser';\r\n\r\nimport { injectable, inject, IDependencyContainer, Guard, Exception, HandlerContainer,\r\n\tActionFactory, HandlerDetails, Types as CmT } from 'back-lib-common-util';\r\n\r\nimport * as rpc from './RpcCommon';\r\n\r\n\r\nexport interface ExpressRpcHandlerInitOptions {\r\n\texpressApp: express.Express;\r\n\texpressRouter: express.Router;\r\n}\r\n\r\nexport interface IDirectRpcHandler extends rpc.IRpcHandler {\r\n\t/**\r\n\t * Http ports to listen\r\n\t */\r\n\tport: number;\r\n\r\n\t/**\r\n\t * @override\r\n\t * @see IRpcHandler.init\r\n\t */\r\n\tinit(params?: ExpressRpcHandlerInitOptions): void;\r\n\r\n\t/**\r\n\t * @override IRpcHandler.handle to return void.\r\n\t */\r\n\thandle(actions: string | string[], dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): void;\r\n}\r\n\r\n@injectable()\r\nexport class ExpressRpcHandler\r\n\t\t\textends rpc.RpcHandlerBase\r\n\t\t\timplements IDirectRpcHandler {\r\n\r\n\tprivate static URL_TESTER: RegExp = (function() {\r\n\t\t\tlet regexp = new RegExp(/^[a-zA-Z0-9_-]*$/);\r\n\t\t\tregexp.compile();\r\n\t\t\treturn regexp;\r\n\t\t})();\r\n\r\n\r\n\tprivate _server: http.Server;\r\n\tprivate _app: express.Express;\r\n\tprivate _router: express.Router;\r\n\tprivate _port: number;\r\n\tprivate _container: HandlerContainer;\r\n\r\n\r\n\tconstructor(\r\n\t\t@inject(CmT.DEPENDENCY_CONTAINER) depContainer: IDependencyContainer\r\n\t) {\r\n\t\tsuper(depContainer);\r\n\t\tthis._port = 30000;\r\n\t\tthis._container = HandlerContainer.instance;\r\n\t\tthis._container.dependencyContainer = depContainer;\r\n\t}\r\n\r\n\r\n\tpublic get port(): number {\r\n\t\treturn this._port;\r\n\t}\r\n\r\n\tpublic set port(val: number) {\r\n\t\tif (val > 0 && val <= 65535) {\r\n\t\t\tthis._port = val;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @see IDirectRpcHandler.init\r\n\t */\r\n\tpublic init(param?: ExpressRpcHandlerInitOptions): void {\r\n\t\tGuard.assertIsFalsey(this._router, 'This RPC Caller is already initialized!');\r\n\t\tGuard.assertIsTruthy(this.name, '`name` property must be set!');\r\n\t\tGuard.assertIsTruthy(this.module, '`module` property must be set!');\r\n\r\n\t\tlet app: express.Express;\r\n\t\tapp = this._app = (param && param.expressApp) \r\n\t\t\t? param.expressApp \r\n\t\t\t: express();\r\n\r\n\t\tthis._router = (param && param.expressRouter) ? param.expressRouter : express.Router();\r\n\t\t//app.use(bodyParser.urlencoded({extended: true})); // Parse Form values in POST request, but I don't think we need it in this case.\r\n\t\tapp.use(bodyParser.json()); // Parse JSON in POST request\r\n\t\tapp.use(`/${this.module}`, this._router);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcHandler.start\r\n\t */\r\n\tpublic start(): Promise<void> {\r\n\t\treturn new Promise<void>(resolve => {\r\n\t\t\tthis._server = this._app.listen(this._port, resolve);\r\n\t\t\tthis._server.on('error', err => this.emitError(err));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcHandler.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve, reject) => {\r\n\t\t\tthis._server.close(() => {\r\n\t\t\t\tthis._server = null;\r\n\t\t\t\tresolve();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcHandler.handle\r\n\t */\r\n\tpublic handle(actions: string | string[], dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): void {\r\n\t\tGuard.assertIsDefined(this._router, '`init` method must be called first!');\r\n\t\t\r\n\t\tactions = Array.isArray(actions) ? actions : [actions];\r\n\t\t\r\n\t\tfor (let a of actions) {\r\n\t\t\tGuard.assertIsMatch(ExpressRpcHandler.URL_TESTER, a, `Route \"${a}\" is not URL-safe!`);\r\n\t\t\tthis._container.register(a, dependencyIdentifier, actionFactory);\r\n\t\t\tthis._router.post(`/${a}`, this.onRequest.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprivate onRequest(req: express.Request, res: express.Response): void {\r\n\t\tlet action = req.url.match(/[^\\/]+$/)[0],\r\n\t\t\trequest: rpc.IRpcRequest = req.body;\r\n\r\n\t\t(new Promise((resolve, reject) => {\r\n\t\t\tlet actionFn = this._container.resolve(action);\r\n\t\t\ttry {\r\n\t\t\t\t// Execute controller's action\r\n\t\t\t\tlet output: any = actionFn(request.payload, resolve, reject, request);\r\n\t\t\t\tif (output instanceof Promise) {\r\n\t\t\t\t\toutput.catch(reject); // Catch async exceptions.\r\n\t\t\t\t}\r\n\t\t\t} catch (err) { // Catch normal exceptions.\r\n\t\t\t\treject(err);\r\n\t\t\t}\r\n\t\t}))\r\n\t\t.then(result => {\r\n\t\t\tres.status(200).send(this.createResponse(true, result, request.from));\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tlet statusCode = 500,\r\n\t\t\t\terrObj = this.createError(error);\r\n\t\t\tres.status(statusCode).send(this.createResponse(false, errObj, request.from));\r\n\t\t})\r\n\t\t// Catch error thrown by `createError()`\r\n\t\t.catch(this.emitError.bind(this));\r\n\t}\r\n}"]}