{"version":3,"sources":["app/RpcCommon.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mCAAsC;AAGtC,+DACgG;AAChG,yEAA4D;AAE5D,IAAI,UAAU,GAAG;IAChB,QAAQ,EAAE,KAAK;IACf,UAAU,EAAE,KAAK;IACjB,YAAY,EAAE,KAAK;IACnB,KAAK,EAAE,IAAI;CACX,CAAC;AAEF,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;IACrB,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;IACtB,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACtD,CAAC;AAED,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAE7B,0BAA0B;AAC1B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACjC,UAAU,CAAC,KAAK,GAAG,2CAAe,CAAC;IACnC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;AAC/D,CAAC;AAED,0BAA0B;AAC1B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAChC,UAAU,CAAC,KAAK,GAAG,qCAAc,CAAC;IAClC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC;AAC9D,CAAC;AAED,0BAA0B;AAC1B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;IACxC,UAAU,CAAC,KAAK,GAAG,6CAAsB,CAAC;IAC1C,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,wBAAwB,EAAE,UAAU,CAAC,CAAC;AACtE,CAAC;AAoGD,mBAAmB;AAGnB,IAAsB,aAAa,GAAnC;IAYC;QACC,IAAI,CAAC,QAAQ,GAAG,IAAI,qBAAY,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACvB,CAAC;IAGD;;OAEG;IACH,IAAW,OAAO;QACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAW,OAAO,CAAC,GAAW;QAC7B,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;QACrB,CAAC;IACF,CAAC;IAEM,OAAO;QACb,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,OAAsB;QACpC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAGS,SAAS,CAAC,GAAG;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAClC,CAAC;IAES,YAAY,CAAC,OAAO;QAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAClB,kEAAkE;YAClE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,EAAE,GAAG,IAAI,qCAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC7C,EAAE,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;YACzB,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;IACF,CAAC;CACD,CAAA;AA9DqB,aAAa;IADlC,iCAAU,EAAE;;GACS,aAAa,CA8DlC;AA9DqB,sCAAa;AAiEnC,IAAsB,cAAc,GAApC;IAeC,YAAsB,aAAmC;QAAnC,kBAAa,GAAb,aAAa,CAAsB;QACxD,4BAAK,CAAC,gBAAgB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,IAAI,qBAAY,EAAE,CAAC;IACpC,CAAC;IAGD;;OAEG;IACI,OAAO,CAAC,OAAsB;QACpC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAGS,SAAS,CAAC,GAAG;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAClC,CAAC;IAES,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE,OAAe;QAC3D,MAAM,CAAC;YACN,SAAS;YACT,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,EAAE,EAAE,OAAO;YACX,OAAO;SACP,CAAC;IACH,CAAC;IAES,WAAW,CAAC,QAAQ;QAC7B,0CAA0C;QAC1C,IAAI,MAAM,GAAQ,EAAE,CAAC;QACrB,EAAE,CAAC,CAAC,QAAQ,YAAY,qCAAc,CAAC,CAAC,CAAC;YACxC,kEAAkE;YAClE,6BAA6B;YAC7B,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC5B,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;YAClC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,YAAY,KAAK,CAAC,IAAI,CAAC,QAAQ,YAAY,gCAAS,CAAC,CAAC,CAAC,CAAC;YAC3E,+EAA+E;YAC/E,uDAAuD;YACvD,MAAM,CAAC,IAAI,GAAG,wBAAwB,CAAC;YACvC,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,EAAE,GAAG,IAAI,qCAAc,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;YAC3C,MAAM,CAAC,IAAI,GAAG,wBAAwB,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;CACD,CAAA;AAhEqB,cAAc;IADnC,iCAAU,EAAE;;GACS,cAAc,CAgEnC;AAhEqB,wCAAc","file":"RpcCommon.js","sourcesContent":["import { EventEmitter } from 'events';\r\nimport * as express from 'express-serve-static-core';\r\n\r\nimport { injectable, IDependencyContainer, Guard,\r\n\tActionFactory, MinorException, Exception, InternalErrorException } from 'back-lib-common-util';\r\nimport { ValidationError } from 'back-lib-common-contracts';\r\n\r\nlet descriptor = {\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: false,\r\n\tvalue: null\r\n};\r\n\r\nif (!global.gennova) {\r\n\tdescriptor.value = {};\r\n\tObject.defineProperty(global, 'gennova', descriptor);\r\n}\r\n\r\nlet gennova = global.gennova;\r\n\r\n/* istanbul ignore else */\r\nif (!gennova['ValidationError']) {\r\n\tdescriptor.value = ValidationError;\r\n\tObject.defineProperty(gennova, 'ValidationError', descriptor);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (!gennova['MinorException']) {\r\n\tdescriptor.value = MinorException;\r\n\tObject.defineProperty(gennova, 'MinorException', descriptor);\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (!gennova['InternalErrorException']) {\r\n\tdescriptor.value = InternalErrorException;\r\n\tObject.defineProperty(gennova, 'InternalErrorException', descriptor);\r\n}\r\n\r\n// Interface - Service contract\r\n\r\nexport interface IRpcRequest {\r\n\tfrom: string;\r\n\tto: string;\r\n\tpayload: any;\r\n}\r\n\r\nexport interface IRpcResponse {\r\n\tisSuccess: boolean;\r\n\tfrom: string;\r\n\tto: string;\r\n\tpayload: any;\r\n}\r\n\r\n// Interface - RPC caller and handler\r\n\r\nexport interface IRpcCaller {\r\n\t/**\r\n\t * A name used in \"from\" and \"to\" request property.\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * Number of milliseconds to wait for response before cancelling the request.\r\n\t * Must be between (inclusive) 1000 and 60000 (Min: 1s, Max: 60s).\r\n\t */\r\n\ttimeout: number;\r\n\r\n\t/**\r\n\t * Sets up this RPC caller with specified `param`. Each implementation class requires\r\n\t * different kinds of `param`.\r\n\t */\r\n\tinit(params?: any): any;\r\n\r\n\t/**\r\n\t * Clear resources.\r\n\t */\r\n\tdispose(): Promise<void>;\r\n\r\n\t/**\r\n\t * Sends a request to `moduleName` to execute `action` with `params`.\r\n\t * @param moduleName The module to send request.\r\n\t * @param action The function name to call on `moduleName`.\r\n\t * @param params Parameters to pass to function `action`.\r\n\t */\r\n\tcall(moduleName: string, action: string, params?: any): Promise<IRpcResponse>;\r\n\r\n\t/**\r\n\t * Registers a listener to handle errors.\r\n\t */\r\n\tonError(handler: (err) => void): void;\r\n}\r\n\r\n\r\nexport type RpcControllerFunction = (requestPayload: any, resolve: PromiseResolveFn, reject: PromiseRejectFn, rawRequest: IRpcRequest) => any;\r\n\r\nexport interface IRpcHandler {\r\n\t/**\r\n\t * A name used in \"from\" and \"to\" request property.\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * A name used to construct subscription topic.\r\n\t */\r\n\tmodule: string;\r\n\t\r\n\t/**\r\n\t * Sets up this RPC handler with specified `param`. Each implementation class requires\r\n\t * different kinds of `param`.\r\n\t */\r\n\tinit(params?: any): any;\r\n\r\n\t/**\r\n\t * Waits for incoming request, resolves an instance with `dependencyIdentifier`,\r\n\t * calls instance's `action` method. If `customAction` is specified, \r\n\t * calls instance's `customAction` instead.\r\n\t */\r\n\thandle(action: string | string[], dependencyIdentifier: string | symbol, actionFactory?: ActionFactory): any;\r\n\r\n\t/**\r\n\t * Registers a listener to handle errors.\r\n\t */\r\n\tonError(handler: (err) => void): void;\r\n\r\n\t/**\r\n\t * Starts listening to requests.\r\n\t */\r\n\tstart(): Promise<void>;\r\n\r\n\t/**\r\n\t * Stops handling requests and removes registered actions.\r\n\t */\r\n\tdispose(): Promise<void>;\r\n}\r\n\r\n\r\n// RPC Base classes\r\n\r\n@injectable()\r\nexport abstract class RpcCallerBase {\r\n\r\n\t/**\r\n\t * @see IRpcCaller.name\r\n\t */\r\n\tpublic name: string;\r\n\r\n\tprivate _timeout: number;\r\n\r\n\tprotected _emitter: EventEmitter;\r\n\r\n\r\n\tconstructor() {\r\n\t\tthis._emitter = new EventEmitter();\r\n\t\tthis._timeout = 30000;\r\n\t}\r\n\t\r\n\r\n\t/**\r\n\t * @see IRpcCaller.timeout\r\n\t */\r\n\tpublic get timeout(): number {\r\n\t\treturn this._timeout;\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcCaller.timeout\r\n\t */\r\n\tpublic set timeout(val: number) {\r\n\t\tif (val >= 1000 && val <= 60000) {\r\n\t\t\tthis._timeout = val;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic dispose(): Promise<void> {\r\n\t\tthis._emitter.removeAllListeners();\r\n\t\tthis._emitter = null;\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IRpcCaller.onError\r\n\t */\r\n\tpublic onError(handler: (err) => void): void {\r\n\t\tthis._emitter.on('error', handler);\r\n\t}\r\n\r\n\r\n\tprotected emitError(err): void {\r\n\t\tthis._emitter.emit('error', err);\r\n\t}\r\n\r\n\tprotected rebuildError(payload) {\r\n\t\tif (payload.type) {\r\n\t\t\t// Expect response.payload.type = MinorException | ValidationError\r\n\t\t\treturn new global.gennova[payload.type](payload.message);\r\n\t\t} else {\r\n\t\t\tlet ex = new MinorException(payload.message);\r\n\t\t\tex.stack = payload.stack;\r\n\t\t\treturn ex;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n@injectable()\r\nexport abstract class RpcHandlerBase {\r\n\r\n\t/**\r\n\t * @see IRpcHandler.name\r\n\t */\r\n\tpublic name: string;\r\n\r\n\t/**\r\n\t * @see IRpcHandler.module\r\n\t */\r\n\tpublic module: string;\r\n\r\n\tprotected _emitter: EventEmitter;\r\n\r\n\r\n\tconstructor(protected _depContainer: IDependencyContainer) {\r\n\t\tGuard.assertArgDefined('_depContainer', _depContainer);\r\n\t\tthis._emitter = new EventEmitter();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @see IRpcHandler.onError\r\n\t */\r\n\tpublic onError(handler: (err) => void): void {\r\n\t\tthis._emitter.on('error', handler);\r\n\t}\r\n\r\n\r\n\tprotected emitError(err): void {\r\n\t\tthis._emitter.emit('error', err);\r\n\t}\r\n\r\n\tprotected createResponse(isSuccess, payload, replyTo: string): IRpcResponse {\r\n\t\treturn {\r\n\t\t\tisSuccess,\r\n\t\t\tfrom: this.name,\r\n\t\t\tto: replyTo,\r\n\t\t\tpayload\r\n\t\t};\r\n\t}\r\n\r\n\tprotected createError(rawError) {\r\n\t\t// TODO: Should log this unexpected error.\r\n\t\tlet errObj: any = {};\r\n\t\tif (rawError instanceof MinorException) {\r\n\t\t\t// If this is a minor error, or the action method sends this error\r\n\t\t\t// back to caller on purpose.\r\n\t\t\terrObj.type = rawError.name;\r\n\t\t\terrObj.message = rawError.message;\r\n\t\t\terrObj.detail = rawError['details'];\r\n\t\t} else if ((rawError instanceof Error) || (rawError instanceof Exception)) {\r\n\t\t\t// If error is an uncaught Exception/Error object, that means the action method\r\n\t\t\t// has a problem. We should not send it back to caller.\r\n\t\t\terrObj.type = 'InternalErrorException';\r\n\t\t\terrObj.message = rawError.message;\r\n\t\t\tthis.emitError(rawError);\r\n\t\t} else {\r\n\t\t\tlet ex = new MinorException(rawError + '');\r\n\t\t\terrObj.type = 'InternalErrorException';\r\n\t\t\tthis.emitError(ex.message);\r\n\t\t}\r\n\t\treturn errObj;\r\n\t}\r\n}\r\n"]}